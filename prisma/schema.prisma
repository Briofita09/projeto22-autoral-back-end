// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @unique @default(autoincrement())
  userType         String
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  Session          Session[]
  UserStaff        UserStaff[]
  UserRecepcionist UserRecepcionist[]
}

model UserRecepcionist {
  id         Int       @id @unique @default(autoincrement())
  name       String
  socialName String?
  gender     String
  cpf        String    @unique @db.VarChar(11)
  phone      String    @db.VarChar(11)
  birthday   DateTime
  updatedAt  DateTime? @updatedAt
  userId     Int
  User       User      @relation(fields: [userId], references: [id])
}

model UserStaff {
  id                  Int            @id @unique @default(autoincrement())
  name                String
  socialName          String?
  gender              String
  cpf                 String         @unique @db.VarChar(11)
  phone               String         @db.VarChar(11)
  birthday            DateTime       
  profession          String
  council             String
  councilRegistration String            @unique
  councilState        String
  updatedAt           DateTime?      @updatedAt
  createdAt           DateTime       @default(now())
  userId              Int
  User                User           @relation(fields: [userId], references: [id])
  specialityId        Int           
  Speciality          Speciality     @relation(fields: [specialityId], references: [id])
  Consultation        Consultation[]
}

model Session {
  id        Int      @id @unique @default(autoincrement())
  token     String
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Speciality {
  id        Int         @id @unique @default(autoincrement())
  name      String
  UserStaff UserStaff[]
}

model Patient {
  id                Int                @id @unique @default(autoincrement())
  name              String
  socialName        String?
  phone             String             @unique @db.VarChar(11)
  cpf               String             @unique @db.VarChar(11)
  rg                String?            @unique @db.VarChar(8)
  birthday          DateTime
  maritalStatus     String?
  birthPlace        String
  nationality       String
  gender            String
  email             String
  observation       String
  schooling         String
  occupation        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  responsibleId     Int?
  addressId         Int
  ResponsiblePerson ResponsiblePerson? @relation(fields: [responsibleId], references: [id])
  Consultation      Consultation[]
}

model Consultation {
  id            Int       @id @unique @default(autoincrement())
  prescriptions String
  description   String
  createdAt     DateTime  @default(now())
  staffId       Int
  patientId     Int
  UserStaff     UserStaff @relation(fields: [staffId], references: [id])
  Patient       Patient   @relation(fields: [patientId], references: [id])
}

model ResponsiblePerson {
  id           Int       @id @unique @default(autoincrement())
  name         String
  socialName   String?
  relationship String
  cpf          String    @unique @db.VarChar(11)
  phone        String    @unique @db.VarChar(11)
  rg           String?   @unique @db.VarChar(8)
  birthday     DateTime
  gender       String
  email        String
  observation  String?
  schooling    String
  occupation   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  Patient      Patient[]
}

model Address {
  id            Int      @id @unique @default(autoincrement())
  cep           String   @unique @db.VarChar(8)
  street        String
  city          String
  number        Int
  state         String
  neighborhood  String
  addressDetail String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
